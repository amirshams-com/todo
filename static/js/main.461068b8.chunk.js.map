{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","Components/TodoEntry.js","Components/TodoItem.js","Components/TodoLogs.js","Components/TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","observable","action","todoStore","lastId","todos","push","filter","todo","TodoEntry","state","value","_this2","react_default","a","createElement","type","onChange","event","setState","target","onKeyDown","keyCode","preventDefault","addNew","className","placeholder","Component","TodoItem","observer","display","toggle","_this","props","onMouseEnter","onMouseLeave","checked","style","onClick","remove","TodoLogs","sorts","activesort","class","leftitem","map","data","href","sort","clear","TodoItems","completeditems","selectsort","code","length","Components_TodoItem","Components_TodoLogs","clearcompleted","App","TodoEntry_TodoEntry","Components_TodoItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.461068b8.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\nimport { observer } from 'mobx-react'\n\nexport default class TodoModel {\n    id\n    store\n    @observable title\n    @observable completed\n\n    constructor(store,title,completed,id){\n        this.store=store;\n        this.title=title;\n        this.completed=completed;\n        this.id=id;\n\n    }\n    \n    @action toggle(){\n        this.completed=!this.completed;\n    }\n}\n\n","import {observable, action, computed} from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n@observable todos=[];\nlastId=0;\n\n\n@action \naddNew(title){\nthis.todos.push(new TodoModel(this,title,false,this.lastId++));\n}\n\n@action\nremove(id){\n    this.todos=this.todos.filter(todo=>todo.id!==id);\n}\n\n@action\nclearcompleted(){\n    this.todos=this.todos.filter(todo=>todo.completed!=true);\n}\n}\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React from \"react\"\nimport {Component} from \"react\"\nimport todoStore from \"../stores/TodoStore\"\nimport {observer} from \"mobx-react\"\nexport default class TodoEntry extends Component{\n    state={\n        value:\"\"\n\n    }\n\n\n    render(){\n        return(\n            <div>\n            <h1>Todo</h1>\n                <input type=\"text\" \n                onChange={event=>{this.setState({value:event.target.value})}}\n                onKeyDown={\n                    event=>{\n                        if(event.keyCode===13){\n                            event.preventDefault();\n                            todoStore.addNew(this.state.value);\n                            event.target.value=\"\";\n                        }\n                    }\n                    \n                }\n                className=\"new-todo\" placeholder=\"what needs to be done?\"\n                ></input>\n            </div>\n        )\n    }\n}","import React from \"react\"\nimport {Component} from \"react\"\nimport {observer} from \"mobx-react\"\n@observer\nclass TodoItem extends Component{\n    state={\n        display:\"none\"\n    }\n    toggle=()=>{\n       this.props.todo.toggle()\n    }\n\n    render(){\n       \n        const todo=this.props.todo;\n        return(\n            <li   className={todo.completed===true ?  \"completed\"    :  \"\" }>\n                        <div className=\"view\" onMouseEnter={()=>{ this.setState({\"display\":\"block\"})}}  onMouseLeave={()=>{ this.setState({\"display\":\"none\"})}} >\n                            <input type=\"checkbox\" className=\"toggle\" value=\"0\"  checked={todo.completed} onChange={this.toggle}></input>\n                            <label>{todo.title}</label>\n                            <button className=\"destry\" style={{display:this.state.display}} onClick={this.props.remove} >x</button>\n                        </div>\n                    </li>\n        )\n    }\n}\nexport default TodoItem;","import React from \"react\"\nimport {Component} from \"react\"\nimport {observer} from \"mobx-react\"\n\n class TodoLogs extends Component{\n    sorts=[\"All\",\"Active\",\"Completed\"];\n    activesort=\"All\";\n    render(){\n        return(\n            <div className=\"footer\">\n               <span class=\"todo-count\"><strong>{this.props.leftitem}</strong> item left</span>\n               \n                <ul class=\"filters\">\n                    {\n                        this.sorts.map(data=>{\n                            return (\n                               this.activesort===data ?\n                               <li><a href=\"#\" className=\"selected\" onClick={()=>{this.props.sort(data)}} >{data}</a></li>\n                               :\n                               <li><a href=\"#\" onClick={()=>{this.props.sort(data);this.activesort=data}} >{data}</a></li>\n                            )\n                        })\n                    }\n                </ul>\n                <button class=\"clear-completed\" onClick={this.props.clear}>Clear completed</button>\n              \n            </div>\n        )\n    }\n}\nexport default TodoLogs;","import React from \"react\"\nimport {Component} from \"react\"\nimport TodoItem from \"./TodoItem\"\nimport todoStore from \"../stores/TodoStore\";\nimport TodoLogs from \"./TodoLogs\";\nimport { observer } from \"mobx-react\";\n\n@observer\nclass TodoItems extends Component{\n    completeditems=0;\n    selectsort=(code)=>{\n      \n         switch(code){\n            case \"All\":\n               this.setState({\"sort\":null});\n               return null;\n            break;\n            case \"Active\":\n               this.setState({\"sort\":false});\n               return false;\n            break;\n            case \"Completed\":\n               this.setState({\"sort\":true});\n               return true;\n               \n            break;\n         }\n      }\n      state={\n         \"sort\":null\n      }\n      \n    render(){\n   \n       this.completeditems=todoStore.todos.filter(todo=>todo.completed===false).length;\n       return( todoStore.todos.length>0 &&\n         [\n             <ul className=\"todo-list\">\n              \n         \n                  {\n                   this.state.sort===null ? \n                    todoStore.todos.map(todo=>{\n                    \n                       return <TodoItem todo={todo}  remove={()=>{todoStore.remove(todo.id); }}/>\n                       \n                    })\n                    :\n                    todoStore.todos.filter(todo=>todo.completed==this.state.sort).map(todo=>{\n                    \n                     return <TodoItem todo={todo}  remove={()=>{todoStore.remove(todo.id); }}/>\n                     \n                  })\n                 }\n             \n                </ul>\n                ,\n              \n                <TodoLogs leftitem={this.completeditems} clear={()=>{todoStore.clearcompleted()}} sort={this.selectsort}/>\n        ]\n        )\n    }\n}\nexport default TodoItems;","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css';\nimport todoStore from \"./stores/TodoStore\";\n// import sections\nimport TodoEntry from \"./Components/TodoEntry\";\nimport TodoItems from \"./Components/TodoItems\";\n\n\n@observer\nclass App extends Component {\n    render() {\n        return [\n            <div id=\"todoapp\" className=\"todoapp\">\n                {/* your code here */}\n               <TodoEntry/>\n               <TodoItems/>\n             \n            </div>,\n            <footer className=\"info\">\n                <p>Written by <a href=\"#\">Amir Shams</a></p>\n                <p>Project of <a href=\"https://maktabkhooneh.org\">Maktabkhooneh</a></p>\n            </footer>\n        ]\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}